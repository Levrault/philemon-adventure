[gd_scene load_steps=20 format=2]

[ext_resource path="res://src/UI/InGame/UpgradeMessage.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/UI/InGame/LevelTransition.tscn" type="PackedScene" id=2]
[ext_resource path="res://src/Scene/AsyncSceneLoading.gd" type="Script" id=3]
[ext_resource path="res://src/Debug/DebugLayer.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/UI/InGame/SaveStation/SaveStationMessage.tscn" type="PackedScene" id=5]
[ext_resource path="res://src/UI/InGame/PopupMessage.tscn" type="PackedScene" id=6]
[ext_resource path="res://src/UI/InGame/InGameMenu.tscn" type="PackedScene" id=7]
[ext_resource path="res://assets/theme/minecraftia_8.tres" type="DynamicFont" id=8]
[ext_resource path="res://assets/theme/player_hud.tres" type="Theme" id=9]
[ext_resource path="res://assets/characters/player/hud/heart_progress.png" type="Texture" id=10]
[ext_resource path="res://assets/upgrade/hyperbeam_upgrade.png" type="Texture" id=11]
[ext_resource path="res://assets/upgrade/beam_upgrade.png" type="Texture" id=12]
[ext_resource path="res://assets/characters/player/hud/heart.png" type="Texture" id=13]
[ext_resource path="res://src/Player/HUD/BeamUIID.gd" type="Script" id=14]
[ext_resource path="res://src/Player/HUD/BeamsSelectorBar.gd" type="Script" id=15]
[ext_resource path="res://src/Player/HUD/HealthBar.gd" type="Script" id=16]
[ext_resource path="res://src/UI/InGame/CoopLeavePopupMessage.tscn" type="PackedScene" id=17]

[sub_resource type="Shader" id=1]
code = "/*
Godot 3 2D CRT Shader.
A 2D shader for Godot 3 simulating a CRT..
Author: hiulit
Repository: https://github.com/hiulit/Godot-3-2D-CRT-Shader
Issues: https://github.com/hiulit/Godot-3-2D-CRT-Shader/issues
License: MIT https://github.com/hiulit/Godot-3-2D-CRT-Shader/blob/master/LICENSE
*/

shader_type canvas_item;

const float PI = 3.14159265359;

uniform vec2 screen_size = vec2(320.0, 180.0);
uniform bool show_curvature = true;
uniform float curvature_x_amount : hint_range(3.0, 15.0, 0.01) = float(6.0); 
uniform float curvature_y_amount : hint_range(3.0, 15.0, 0.01) = float(4.0);
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_vignette = true;
uniform float vignette_opacity : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform bool show_horizontal_scan_lines = true;
uniform float horizontal_scan_lines_amount : hint_range(0.0, 180.0, 0.1) = 180.0;
uniform float horizontal_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform bool show_vertical_scan_lines = false;
uniform float vertical_scan_lines_amount : hint_range(0.0, 320.0, 0.1) = 320.0;
uniform float vertical_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float boost : hint_range(1.0, 2.0, 0.01) = 1.2;
uniform float aberration_amount : hint_range(0.0, 10.0, 0.01) = 0.0;

vec2 uv_curve(vec2 uv) {
	if (show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(curvature_x_amount, curvature_y_amount);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}

	return uv;
}


void fragment() {
	vec2 uv = uv_curve(UV);
	vec2 screen_uv = uv_curve(SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_uv).rgb;

	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		color.r = texture(SCREEN_TEXTURE, vec2(screen_uv.x + adjusted_amount, screen_uv.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_uv).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_uv.x - adjusted_amount, screen_uv.y)).b;
	}

	if (show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_opacity), 0.0, 1.0);
		color *= vignette;
	}

	if (show_horizontal_scan_lines) {
		float s = sin(screen_uv.y * horizontal_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, horizontal_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_vertical_scan_lines) {
		float s = sin(screen_uv.x * vertical_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, vertical_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_horizontal_scan_lines || show_vertical_scan_lines) {
		color *= boost;
	}

	// Fill the blank space of the corners, left by the curvature, with black.
	if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
		color = corner_color.rgb;
	}

	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/screen_size = Vector2( 320, 180 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 6.0
shader_param/curvature_y_amount = 4.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_opacity = 0.2
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 180.0
shader_param/horizontal_scan_lines_opacity = 1.0
shader_param/show_vertical_scan_lines = false
shader_param/vertical_scan_lines_amount = 320.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 1.2
shader_param/aberration_amount = 0.0

[node name="Main" type="Node2D"]

[node name="UI" type="CanvasLayer" parent="."]
pause_mode = 2

[node name="UpgradeMessage" parent="UI" instance=ExtResource( 1 )]

[node name="SaveStationMessage" parent="UI" instance=ExtResource( 5 )]

[node name="PopupMessage" parent="UI" instance=ExtResource( 6 )]

[node name="LeaveMessage" parent="UI" instance=ExtResource( 17 )]

[node name="HUD" type="CanvasLayer" parent="."]

[node name="Control" type="Control" parent="HUD"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 9 )

[node name="VBoxContainer" type="VBoxContainer" parent="HUD/Control"]
margin_left = 4.0
margin_top = 4.0
margin_right = 60.0
margin_bottom = 40.0
custom_constants/separation = 0

[node name="Energy" type="Label" parent="HUD/Control/VBoxContainer"]
margin_right = 56.0
margin_bottom = 11.0
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
custom_constants/shadow_offset_x = 1
custom_constants/shadow_offset_y = 1
custom_fonts/font = ExtResource( 8 )
text = "Energy"
uppercase = true

[node name="HealthBar" type="HBoxContainer" parent="HUD/Control/VBoxContainer"]
margin_top = 11.0
margin_right = 56.0
margin_bottom = 22.0
script = ExtResource( 16 )

[node name="TextureProgress" type="TextureProgress" parent="HUD/Control/VBoxContainer/HealthBar"]
margin_right = 9.0
margin_bottom = 11.0
max_value = 99.0
value = 99.0
rounded = true
texture_over = ExtResource( 13 )
texture_progress = ExtResource( 10 )
fill_mode = 3

[node name="Health" type="Label" parent="HUD/Control/VBoxContainer/HealthBar"]
margin_left = 13.0
margin_right = 25.0
margin_bottom = 11.0
text = "99"

[node name="BeamsSelectorBar" type="HBoxContainer" parent="HUD/Control"]
margin_left = 4.0
margin_top = 27.0
margin_right = 60.0
margin_bottom = 43.0
rect_scale = Vector2( 0.7, 0.7 )
script = ExtResource( 15 )

[node name="Beam" type="TextureRect" parent="HUD/Control/BeamsSelectorBar"]
margin_right = 16.0
margin_bottom = 16.0
rect_pivot_offset = Vector2( 0.8, 0.8 )
texture = ExtResource( 12 )
script = ExtResource( 14 )

[node name="CurvedBeam" type="TextureRect" parent="HUD/Control/BeamsSelectorBar"]
margin_left = 20.0
margin_right = 36.0
margin_bottom = 16.0
rect_pivot_offset = Vector2( 0.8, 0.8 )
texture = ExtResource( 11 )
script = ExtResource( 14 )
id = 2

[node name="LevelTransition" parent="." instance=ExtResource( 2 )]

[node name="CRT" type="CanvasLayer" parent="."]
layer = 3
visible = false

[node name="ColorRect" type="ColorRect" parent="CRT"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_pivot_offset = Vector2( -40, 459 )

[node name="DebugLayer" parent="." instance=ExtResource( 4 )]

[node name="PauseMenu" type="CanvasLayer" parent="."]
layer = 2

[node name="InGameMenu" parent="PauseMenu" instance=ExtResource( 7 )]
pause_mode = 2

[node name="AsyncSceneLoading" type="Node2D" parent="."]
script = ExtResource( 3 )
current_level = 14
